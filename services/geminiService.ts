import { GoogleGenAI, Modality } from "@google/genai";

if (!process.env.API_KEY) {
  console.warn("API_KEY environment variable not set. Gemini API calls will fail.");
}

const ai = new GoogleGenAI({ apiKey: process.env.API_KEY! });

export const generateCertificateDesign = async (prompt: string, imageFile: File | null): Promise<string> => {
  const toBase64 = (file: File) => new Promise<string>((resolve, reject) => {
    const reader = new FileReader();
    reader.readAsDataURL(file);
    reader.onload = () => resolve((reader.result as string).split(',')[1]);
    reader.onerror = error => reject(error);
  });

  const parts: ({ text: string } | { inlineData: { data: string, mimeType: string }})[] = [{ text: prompt }];

  if (imageFile) {
    const base64ImageData = await toBase64(imageFile);
    parts.unshift({ // Add image first if it exists
      inlineData: {
        data: base64ImageData,
        mimeType: imageFile.type,
      },
    });
  }

  const response = await ai.models.generateContent({
    model: 'gemini-2.5-flash-image-preview',
    contents: {
      parts: parts,
    },
    config: {
        responseModalities: [Modality.IMAGE, Modality.TEXT],
    },
  });

  for (const part of response.candidates[0].content.parts) {
    if (part.inlineData) {
      const base64ImageBytes: string = part.inlineData.data;
      return `data:${part.inlineData.mimeType};base64,${base64ImageBytes}`;
    }
  }

  throw new Error("No image was generated by the model. The model might have only returned text. Try adjusting your prompt.");
};